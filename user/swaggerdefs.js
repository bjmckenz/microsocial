/**
 * @swagger
 * tags: 
 *    - name: Examples
 *      description: Example code. Do not use this as a real service
 *    - name: Users API 
 *    - name: Content API
 *    - name: Auth API
 *    - name: Schema
 */

/**
 * @swagger
 * components:
 *   schemas:
 *     UserId:
 *       type: integer
 *       minimum: 1
 *       readOnly: true
 *            
 * 
 *     User:
 *       type: object
 *       required:
 *         - id
 *         - name
 *         - password
 *       properties:
 *         id:
 *           type: integer
 *           minimum: 1
 *           readOnly: true
 *           description: The auto-generated id of the User. Will be unique.
 *         name:
 *           type: string
 *           minLength: 1
 *           maxLength: 32
 *           pattern: '^[A-Za-z0-9_.-]{1,32}$'
 *           description: Name that they log in with. Must be unique
 *         password:
 *           type: string
 *           minLength: 4
 *           format: password
 *           description: No leading or trailing spaces. Never returned by an API.
 *         datecreated:
 *           type: integer
 *           description: The server time their account was created, generated by Date.now(). Set by API at User creation.
 *         accountstatus:
 *           type: integer 
 *           description: The active status for the account, 1:Active, 0:Deactive. Only active accounts can log in.
 *         lastlogin:
 *           type: integer
 *           description: The date of the last successful login provided by Date.now(). Set by API at successful Auth.
 *         emailaddress:
 *           type: string
 *           minLength: 3
 *           pattern: '/^(([^<>()[\]\.,;:\s@"]+(\.[^<>()[\]\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/'
 *           description: The email address for this user account.
 *         touversion:
 *           type: integer
 *           description: The last accepted version of terms of use, default to null if not accepted.
 *         country:
 *           type: string
 *           minLength: 3
 *           maxLength: 32
 *           pattern: '/^[\w]{1,32}$/'
 *           description: The name of the user's country.
 *         passhint:
 *           type: string
 *           minLength: 3
 *           maxLength: 64
 *           pattern: '/^[\w]{1,64}$/'
 *           description: A helpful hint for remembering the user's password, Cannot be the user's password.
 *         phonenumber:
 *           type: string
 *           pattern: '(^\(?([0-9]{3})\)?[-.\s]?([0-9]{3})[-.\s]?([0-9]{4})$)|(^(?:(?:\+|00)33[\s.-]{0,3}(?:\(0\)[\s.-]{0,3})?|0)[1-9](?:(?:[\s.-]?\d{2}){4}|\d{2}(?:[\s.-]?\d{3}){2})$)|(^(?:(?:\+|00)86)?1(?:(?:3[\d])|(?:4[5-79])|(?:5[0-35-9])|(?:6[5-7])|(?:7[0-8])|(?:8[\d])|(?:9[189]))\d{8}$)|(((\+*)((0[ -]*)*|((91 )*))((\d{12})+|(\d{10})+))|\d{5}([- ]*)\d{6})|(\(([0-9]{2}|0{1}((x|[0-9]){2}[0-9]{2}))\)\s*[0-9]{3,4}[- ]*[0-9]{4})|((^1300\d{6}$)|(^1800|1900|1902\d{6}$)|(^0[2|3|7|8]{1}[0-9]{8}$)|(^13\d{4}$)|(^04\d{2,3}\d{6}$))|((^\+[0-9]{2}|^\+[0-9]{2}\(0\)|^\(\+[0-9]{2}\)\(0\)|^00[0-9]{2}|^0)([0-9]{9}$|[0-9\-\s]{10}$))|(^(([+]\d{2}[ ][1-9]\d{0,2}[ ])|([0]\d{1,3}[-]))((\d{2}([ ]\d{2}){2})|(\d{3}([ ]\d{3})*([ ]\d{2})+))$)|(^(((\+44\s?\d{4}|\(?0\d{4}\)?)\s?\d{3}\s?\d{3})|((\+44\s?\d{3}|\(?0\d{3}\)?)\s?\d{3}\s?\d{4})|((\+44\s?\d{2}|\(?0\d{2}\)?)\s?\d{4}\s?\d{4}))(\s?#(\d{4}|\d{3}))?$)|(\(?([\d \-\)–\+\/\(]+){6,}\)?([ .\-–\/]?)([\d]+))'
 *           description: The user's phone number.
 *         twofactormethod:
 *           type: string
 *           pattern: '^(none)|(auth)|(cell)|(sms)$'
 *           description: The method of twofactor the user has selected. Accepted values ["none", "auth", "cell", "sms"]
 *         recoveryemail:
 *           type: string
 *           minLength: 3
 *           pattern: '^(([^<>()[\]\.,;:\s@"]+(\.[^<>()[\]\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$'
 *           description: The recovery email for this account. Cannot be the same as the user's emailaddress.
 *         uri:
 *           type: string
 *           readOnly: true
 *           format: password
 *           description: URI to this object. Set by API at User creation.
 *           
 *       examples: [
 *         { id: 1, name: "alonzo", password: "lambda", datecreated: 1684035272535, accountstatus: 1, lastlogin: 1684035299999, emailaddress: "alonzo@hotmail.com", touversion: 3, country: "United States", passhint: "Count to three please", phonenumber: "(56)709", twofactormethod: "sms", recoveryemail: "tapdancer@yahoo.com", uri "http://lh:8/user/14" }
 *       ]
 * 
 *     LoginInfo:
 *       type: object
 *       required:
 *         - name
 *         - password
 *       properties:
 *         name:
 *           type: string
 *           minLength: 1
 *           maxLength: 32
 *           pattern: '^[A-Za-z0-9_.-]{1,32}$'
 *           description: Name that they log in with.
 *         password:
 *           type: string
 *           minLength: 4
 *           format: '^[^ ]{4,}$'
 *           description: No leading or trailing spaces.
 *       examples: [
 *         { name: "alonzo", password: "lambda" }
 *       ]
 * 
 *     LoginToken:
 *       type: object
 *       summary: JWT for authentication
 *       properties:
 *         client_id:
 *           type: integer
 *           readOnly: true
 *           description: id of user
 *         access_token:
 *           type: string
 *           readOnly: true
 *           description: Opaque string. To be passed as in Authentication header as "Bearer <token>.
 *         refresh_token:
 *           type: string
 *           readOnly: true
 *           minLength: 36
 *           maxLength: 36
 *           description: Opaque string. To be passed when access_token expires.
 *       
 *     RefreshToken:
 *       type: object
 *       summary: A Refresh Token
 *       required:
 *         - refresh_token
 *       properties:
 *         refresh_token:
 *           type: string
 *           readOnly: true
 *           minLength: 36
 *           maxLength: 36
 *           description: Opaque string. To be passed when access_token expires.
 *       
 *     RetrievedUser:
 *       type: object
 *       summary: User schema submitted when updating.
 *       properties:
 *         id:
 *           type: integer
 *           minimum: 1
 *           readOnly: true
 *           description: The auto-generated id of the book. Will be unique.
 *         name:
 *           type: string
 *           minLength: 1
 *           maxLength: 32
 *           pattern: '^[A-Za-z0-9_.-]{1,32}$'
 *           description: Name that they log in with. Must be unique
 *         datecreated:
 *           type: integer
 *           description: The server time their account was created, generated by Date.now(). Set by API at User creation.
 *         accountstatus:
 *           type: integer
 *           description: The active status for the account, 1:Active, 0:Deactive. Only active accounts can log in.
 *         lastlogin:
 *           type: integer
 *           description: The date of the last successful login provided by Date.now(). Set by API at successful Auth.
 *         emailaddress:
 *           type: string
 *           minLength: 3
 *           pattern: '^(([^<>()[\]\.,;:\s@"]+(\.[^<>()[\]\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$'
 *           description: The email address for this user account.
 *         touversion:
 *           type: integer
 *           description: The last accepted version of terms of use, default to null if not accepted.
 *         country:
 *           type: string
 *           minLength: 3
 *           maxLength: 32
 *           pattern: '^[\w]{1,32}$'
 *           description: The name of the user's country.
 *         passhint:
 *           type: string
 *           minLength: 3
 *           maxLength: 64
 *           pattern: '/^[\w]{1,64}$/'
 *           description: A helpful hint for remembering the user's password, Cannot be the user's password.
 *         phonenumber:
 *           type: string
 *           pattern: '(^\(?([0-9]{3})\)?[-.\s]?([0-9]{3})[-.\s]?([0-9]{4})$)|(^(?:(?:\+|00)33[\s.-]{0,3}(?:\(0\)[\s.-]{0,3})?|0)[1-9](?:(?:[\s.-]?\d{2}){4}|\d{2}(?:[\s.-]?\d{3}){2})$)|(^(?:(?:\+|00)86)?1(?:(?:3[\d])|(?:4[5-79])|(?:5[0-35-9])|(?:6[5-7])|(?:7[0-8])|(?:8[\d])|(?:9[189]))\d{8}$)|(((\+*)((0[ -]*)*|((91 )*))((\d{12})+|(\d{10})+))|\d{5}([- ]*)\d{6})|(\(([0-9]{2}|0{1}((x|[0-9]){2}[0-9]{2}))\)\s*[0-9]{3,4}[- ]*[0-9]{4})|((^1300\d{6}$)|(^1800|1900|1902\d{6}$)|(^0[2|3|7|8]{1}[0-9]{8}$)|(^13\d{4}$)|(^04\d{2,3}\d{6}$))|((^\+[0-9]{2}|^\+[0-9]{2}\(0\)|^\(\+[0-9]{2}\)\(0\)|^00[0-9]{2}|^0)([0-9]{9}$|[0-9\-\s]{10}$))|(^(([+]\d{2}[ ][1-9]\d{0,2}[ ])|([0]\d{1,3}[-]))((\d{2}([ ]\d{2}){2})|(\d{3}([ ]\d{3})*([ ]\d{2})+))$)|(^(((\+44\s?\d{4}|\(?0\d{4}\)?)\s?\d{3}\s?\d{3})|((\+44\s?\d{3}|\(?0\d{3}\)?)\s?\d{3}\s?\d{4})|((\+44\s?\d{2}|\(?0\d{2}\)?)\s?\d{4}\s?\d{4}))(\s?#(\d{4}|\d{3}))?$)|(\(?([\d \-\)–\+\/\(]+){6,}\)?([ .\-–\/]?)([\d]+))'
 *           description: The user's phone number.
 *         twofactormethod:
 *           type: string
 *           pattern: '/^(none)|(auth)|(cell)|(sms)$/'
 *           description: The method of twofactor the user has selected. Accepted values ["none", "auth", "cell", "sms"]
 *         recoveryemail:
 *           type: string
 *           minLength: 3
 *           pattern: '^(([^<>()[\]\.,;:\s@"]+(\.[^<>()[\]\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$'
 *           description: The recovery email for this account. Cannot be the same as the user's emailaddress.
 *         uri:
 *           type: string
 *           readOnly: true
 *           format: password
 *           description: URI to this object. Set by API at User creation.
 *       examples: [
 *         { id: 1, name: "alonzo", datecreated: 1684035272535, accountstatus: 1, lastlogin: 1684035299999, emailaddress: "alonzo@hotmail.com", touversion: 3, country: "United States", passhint: "Count to three please", phonenumber: "(56)709", twofactormethod: "sms", recoveryemail: "tapdancer@yahoo.com", uri "http://lh:8/user/14" }
 *       ]
 * 
 * 
 *     CreatingUser:
 *       type: object
 *       required:
 *         - name
 *         - password
 *       properties:
 *         name:
 *           type: string
 *           minLength: 1
 *           maxLength: 32
 *           pattern: '^[A-Za-z0-9_.-]{1,32}$'
 *           description: Name that they log in with. Must be unique
 *         password:
 *           type: string
 *           minLength: 4
 *           format: password
 *           description: Guess. No leading or trailing spaces. Never returned by an API.
 *         accountstatus:
 *           type: integer 
 *           description: The active status for the account, 1:Active, 0:Deactive. Only active accounts can log in.
 *         emailaddress:
 *           type: string
 *           minLength: 3
 *           pattern: '^(([^<>()[\]\.,;:\s@"]+(\.[^<>()[\]\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$'
 *           description: The email address for this user account.
 *         touversion:
 *           type: integer
 *           description: The last accepted version of terms of use, default to null if not accepted.
 *         country:
 *           type: string
 *           minLength: 3
 *           maxLength: 32
 *           pattern: '^[\s\w]{3,32}$'
 *           description: The name of the user's country.
 *         passhint:
 *           type: string
 *           minLength: 3
 *           maxLength: 64
 *           pattern: '^[\s\w]{3,64}$'
 *           description: A helpful hint for remembering the user's password, Cannot be the user's password.
 *         phonenumber:
 *           type: string
 *           pattern: '(^\(?([0-9]{3})\)?[-.\s]?([0-9]{3})[-.\s]?([0-9]{4})$)|(^(?:(?:\+|00)33[\s.-]{0,3}(?:\(0\)[\s.-]{0,3})?|0)[1-9](?:(?:[\s.-]?\d{2}){4}|\d{2}(?:[\s.-]?\d{3}){2})$)|(^(?:(?:\+|00)86)?1(?:(?:3[\d])|(?:4[5-79])|(?:5[0-35-9])|(?:6[5-7])|(?:7[0-8])|(?:8[\d])|(?:9[189]))\d{8}$)|(((\+*)((0[ -]*)*|((91 )*))((\d{12})+|(\d{10})+))|\d{5}([- ]*)\d{6})|(\(([0-9]{2}|0{1}((x|[0-9]){2}[0-9]{2}))\)\s*[0-9]{3,4}[- ]*[0-9]{4})|((^1300\d{6}$)|(^1800|1900|1902\d{6}$)|(^0[2|3|7|8]{1}[0-9]{8}$)|(^13\d{4}$)|(^04\d{2,3}\d{6}$))|((^\+[0-9]{2}|^\+[0-9]{2}\(0\)|^\(\+[0-9]{2}\)\(0\)|^00[0-9]{2}|^0)([0-9]{9}$|[0-9\-\s]{10}$))|(^(([+]\d{2}[ ][1-9]\d{0,2}[ ])|([0]\d{1,3}[-]))((\d{2}([ ]\d{2}){2})|(\d{3}([ ]\d{3})*([ ]\d{2})+))$)|(^(((\+44\s?\d{4}|\(?0\d{4}\)?)\s?\d{3}\s?\d{3})|((\+44\s?\d{3}|\(?0\d{3}\)?)\s?\d{3}\s?\d{4})|((\+44\s?\d{2}|\(?0\d{2}\)?)\s?\d{4}\s?\d{4}))(\s?#(\d{4}|\d{3}))?$)|(\(?([\d \-\)–\+\/\(]+){6,}\)?([ .\-–\/]?)([\d]+))'
 *           description: The user's phone number.
 *         twofactormethod:
 *           type: string
 *           pattern: '^(none)|(auth)|(cell)|(sms)$'
 *           description: The method of twofactor the user has selected. Accepted values ["none", "auth", "cell", "sms"]
 *         recoveryemail:
 *           type: string
 *           minLength: 3
 *           pattern: '^(([^<>()[\]\.,;:\s@"]+(\.[^<>()[\]\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$'
 *           description: The recovery email for this account. Cannot be the same as the user's emailaddress.
 *       examples: [
 *         { id: 1, name: "alonzo", datecreated: 1684035272535, accountstatus: 1, lastlogin: 1684035299999, emailaddress: "alonzo@hotmail.com", touversion: 3, country: "United States", passhint: "Count to three please", phonenumber: "(56)709", twofactormethod: "sms", recoveryemail: "tapdancer@yahoo.com" }
 *       ]
 * 
 * 
 *     UpdatingUser:
 *       type: object
 *       summary: User schema submitted when updating.
 *       required:
 *         - name
 *         - password
 *         - accountstatus
 *         - emailaddress
 *         - touversion
 *         - country
 *         - passhint
 *         - phonenumber
 *         - twofactormethod
 *         - recoveryemail
 *       properties:
 *         name:
 *           type: string
 *           minLength: 1
 *           maxLength: 32
 *           pattern: '^[A-Za-z0-9_.-]{1,32}$'
 *           description: Name that they log in with. Must be unique
 *         password:
 *           type: string
 *           minLength: 4
 *           format: password
 *           description: Guess. No leading or trailing spaces. Never returned by an API. description Columns to sort by, separated by commas. Names are case-insensitive. Sorts are ascending unless a "-" is given. "+" is accepted but is unnecessary. Acceptable columns are id and name.
 *         accountstatus:
 *           type: integer
 *           description: The active status for the account, 1:Active, 0:Deactive. Only active accounts can log in.
 *         emailaddress:
 *           type: string
 *           minLength: 3
 *           pattern: '^(([^<>()[\]\.,;:\s@"]+(\.[^<>()[\]\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$'
 *           description: The email address for this user account.
 *         touversion:
 *           type: integer
 *           description: The last accepted version of terms of use, default to null if not accepted.
 *         country:
 *           type: string
 *           minLength: 3
 *           maxLength: 32
 *           pattern: '^[\s\w]{3,32}$'
 *           description: The name of the user's country.
 *         passhint:
 *           type: string
 *           minLength: 3
 *           maxLength: 64
 *           pattern: '^[\s\w]{3,64}$'
 *           description: A helpful hint for remembering the user's password, Cannot be the user's password.
 *         phonenumber:
 *           type: string
 *           pattern: '(^\(?([0-9]{3})\)?[-.\s]?([0-9]{3})[-.\s]?([0-9]{4})$)|(^(?:(?:\+|00)33[\s.-]{0,3}(?:\(0\)[\s.-]{0,3})?|0)[1-9](?:(?:[\s.-]?\d{2}){4}|\d{2}(?:[\s.-]?\d{3}){2})$)|(^(?:(?:\+|00)86)?1(?:(?:3[\d])|(?:4[5-79])|(?:5[0-35-9])|(?:6[5-7])|(?:7[0-8])|(?:8[\d])|(?:9[189]))\d{8}$)|(((\+*)((0[ -]*)*|((91 )*))((\d{12})+|(\d{10})+))|\d{5}([- ]*)\d{6})|(\(([0-9]{2}|0{1}((x|[0-9]){2}[0-9]{2}))\)\s*[0-9]{3,4}[- ]*[0-9]{4})|((^1300\d{6}$)|(^1800|1900|1902\d{6}$)|(^0[2|3|7|8]{1}[0-9]{8}$)|(^13\d{4}$)|(^04\d{2,3}\d{6}$))|((^\+[0-9]{2}|^\+[0-9]{2}\(0\)|^\(\+[0-9]{2}\)\(0\)|^00[0-9]{2}|^0)([0-9]{9}$|[0-9\-\s]{10}$))|(^(([+]\d{2}[ ][1-9]\d{0,2}[ ])|([0]\d{1,3}[-]))((\d{2}([ ]\d{2}){2})|(\d{3}([ ]\d{3})*([ ]\d{2})+))$)|(^(((\+44\s?\d{4}|\(?0\d{4}\)?)\s?\d{3}\s?\d{3})|((\+44\s?\d{3}|\(?0\d{3}\)?)\s?\d{3}\s?\d{4})|((\+44\s?\d{2}|\(?0\d{2}\)?)\s?\d{4}\s?\d{4}))(\s?#(\d{4}|\d{3}))?$)|(\(?([\d \-\)–\+\/\(]+){6,}\)?([ .\-–\/]?)([\d]+))'
 *           description: The user's phone number.
 *         twofactormethod:
 *           type: string
 *           pattern: '^(none)|(auth)|(cell)|(sms)$'
 *           description: The method of twofactor the user has selected. Accepted values ["none", "auth", "cell", "sms"]
 *         recoveryemail:
 *           type: string
 *           minLength: 3
 *           pattern: '^(([^<>()[\]\.,;:\s@"]+(\.[^<>()[\]\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$'
 *           description: The recovery email for this account. Cannot be the same as the user's emailaddress.
 *       examples: [
 *         { id: 1, name: "alonzo", accountstatus: 1, emailaddress: "alonzo@hotmail.com", touversion: 3, country: "United States", passhint: "Count to three please", phonenumber: "(56)709", twofactormethod: "sms", recoveryemail: "tapdancer@yahoo.com" }
 *       ]
 * 
 *     PatchingUser:
 *       type: object
 *       properties:
 *         name:
 *           type: string
 *           minLength: 1
 *           maxLength: 32
 *           pattern: '^[A-Za-z0-9_.-]{1,32}$'
 *           description: Name that they log in with. Must be unique
 *         password:
 *           type: string
 *           minLength: 4
 *           format: password
 *           description: Guess. No leading or trailing spaces. Never returned by an API.
 *         datecreated:
 *           type: integer
 *           description: The server time their account was created, generated by Date.now(). Set by API at User creation.
 *         accountstatus:
 *           type: integer
 *           description: The active status for the account, 1:Active, 0:Deactive. Only active accounts can log in.
 *         lastlogin:
 *           type: integer
 *           description: The date of the last successful login provided by Date.now(). Set by API at successful Auth.
 *         emailaddress:
 *           type: string
 *           minLength: 3
 *           pattern: '^(([^<>()[\]\.,;:\s@"]+(\.[^<>()[\]\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$'
 *           description: The email address for this user account.
 *         touversion:
 *           type: integer
 *           description: The last accepted version of terms of use, default to null if not accepted.
 *         country:
 *           type: string
 *           minLength: 3
 *           maxLength: 32
 *           pattern: '^[\s\w]{1,32}$'
 *           description: The name of the user's country.
 *         passhint:
 *           type: string
 *           minLength: 3
 *           maxLength: 64
 *           pattern: '^[\s\w]{1,64}$'
 *           description: A helpful hint for remembering the user's password, Cannot be the user's password.
 *         phonenumber:
 *           type: string
 *           pattern: '(^\(?([0-9]{3})\)?[-.\s]?([0-9]{3})[-.\s]?([0-9]{4})$)|(^(?:(?:\+|00)33[\s.-]{0,3}(?:\(0\)[\s.-]{0,3})?|0)[1-9](?:(?:[\s.-]?\d{2}){4}|\d{2}(?:[\s.-]?\d{3}){2})$)|(^(?:(?:\+|00)86)?1(?:(?:3[\d])|(?:4[5-79])|(?:5[0-35-9])|(?:6[5-7])|(?:7[0-8])|(?:8[\d])|(?:9[189]))\d{8}$)|(((\+*)((0[ -]*)*|((91 )*))((\d{12})+|(\d{10})+))|\d{5}([- ]*)\d{6})|(\(([0-9]{2}|0{1}((x|[0-9]){2}[0-9]{2}))\)\s*[0-9]{3,4}[- ]*[0-9]{4})|((^1300\d{6}$)|(^1800|1900|1902\d{6}$)|(^0[2|3|7|8]{1}[0-9]{8}$)|(^13\d{4}$)|(^04\d{2,3}\d{6}$))|((^\+[0-9]{2}|^\+[0-9]{2}\(0\)|^\(\+[0-9]{2}\)\(0\)|^00[0-9]{2}|^0)([0-9]{9}$|[0-9\-\s]{10}$))|(^(([+]\d{2}[ ][1-9]\d{0,2}[ ])|([0]\d{1,3}[-]))((\d{2}([ ]\d{2}){2})|(\d{3}([ ]\d{3})*([ ]\d{2})+))$)|(^(((\+44\s?\d{4}|\(?0\d{4}\)?)\s?\d{3}\s?\d{3})|((\+44\s?\d{3}|\(?0\d{3}\)?)\s?\d{3}\s?\d{4})|((\+44\s?\d{2}|\(?0\d{2}\)?)\s?\d{4}\s?\d{4}))(\s?#(\d{4}|\d{3}))?$)|(\(?([\d \-\)–\+\/\(]+){6,}\)?([ .\-–\/]?)([\d]+))'
 *           description: The user's phone number. 
 *         twofactormethod:
 *           type: string
 *           pattern: '^(none)|(auth)|(cell)|(sms)$'
 *           description: The method of twofactor the user has selected. Accepted values ["none", "auth", "cell", "sms"]
 *         recoveryemail:
 *           type: string
 *           minLength: 3
 *           pattern: '^(([^<>()[\]\.,;:\s@"]+(\.[^<>()[\]\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$'
 *           description: The recovery email for this account. Cannot be the same as the user's emailaddress.
 *       examples: [
 *         { id: 1, name: "alonzo", datecreated: 1684035272535, accountstatus: 1, lastlogin: 1684035299999, emailaddress: "alonzo@hotmail.com", touversion: 3, country: "United States", passhint: "Count to three please", phonenumber: "(56)709", twofactormethod: "sms", recoveryemail: "tapdancer@yahoo.com" }
 *       ]
 *
  *     UserFilteringSpec:
 *       description: Valid query parameters. Result set is Users who match ALL criteria. If you are retrieving results from a previous set (start_at, page_size) it is not necessary to repeat the query/sort params. In fact they will be ignored. ** The query/sort params are only used when the "start_at" param is NOT specified. This is how a "new" query is signalled **
 *       type: object
 *       examples: 
 *           - id_LE: 1000
 *           - id_GE: 50
 *           - name_LE: "zebra"
 *           - name_GE: "aardvark"
 *           - name_CONT: "%tony%"
 *           - start_at: 1000
 *           - page_size: 100
 *       properties:
 *         id_LE:
 *           type: integer
 *           minimum: 1
 *           description: Users with an Id <<= this will be returned.
 *         id_GE:
 *           type: integer
 *           minimum: 1
 *           description: Users with an Id >= this will be returned.
 *         name_LE:
 *           type: string
 *           minLength: 1
 *           description: Users with an Name <= this (case insensitive) will be returned.
 *         name_GE:
 *           type: string
 *           minLength: 1
 *           description: Users with an Name >= this (case insensitive) will be returned.
 *         name_CONT:
 *           type: string
 *           minLength: 1
 *           description: Users with an Name LIKE this will be returned.
 *           examples: ["'%tony%' -> 'antony'"]
 *         start_at:
 *           type: integer
 *           minimum: 1
 *           description: Row number (NOT id) to start at. If this is specified by page_size is not, page_size defaults to (configured) 100 rows.
 *         page_size:
 *           type: integer
 *           minimum: 1
 *           description: How many rows to return each time?
 * 
 *     UserSortingSpec:
 *       type:  array
 *       uniqueItems: true
 *       minItems: 1
 *       maxItems: 2
 *       items:
 *          type: string
 *          nullable: false
 *          enum: [ id, id-, id+, name-, name, name+ ]
 * 
 *     UserSortingOption:
 *         type: string
 *         nullable: false
 *         enum: 
 *          - id
 *          - name
 *
 *     UserSortingSpec_bad:
 *       type:  array
 *       items:
 *          type: string 
 *          //$ref: '#/components/schemas/UserSortingOption'
 * 
 */
 
